diff --git a/node_modules/socket.io-parser/CHANGELOG.md b/node_modules/socket.io-parser/CHANGELOG.md
index 4033b30..11984ac 100644
--- a/node_modules/socket.io-parser/CHANGELOG.md
+++ b/node_modules/socket.io-parser/CHANGELOG.md
@@ -1,3 +1,14 @@
+## [4.0.4](https://github.com/socketio/socket.io-parser/compare/4.0.3...4.0.4) (2021-01-15)
+
+
+### Bug Fixes
+
+* allow integers as event names ([1c220dd](https://github.com/socketio/socket.io-parser/commit/1c220ddbf45ea4b44bc8dbf6f9ae245f672ba1b9))
+
+
+## [4.0.3](https://github.com/socketio/socket.io-parser/compare/4.0.2...4.0.3) (2021-01-05)
+
+
 ## [4.0.2](https://github.com/socketio/socket.io-parser/compare/4.0.1...4.0.2) (2020-11-25)
 
 
diff --git a/node_modules/socket.io-parser/Readme.md b/node_modules/socket.io-parser/Readme.md
index 458a76b..e4f6a8a 100644
--- a/node_modules/socket.io-parser/Readme.md
+++ b/node_modules/socket.io-parser/Readme.md
@@ -1,7 +1,7 @@
 
 # socket.io-parser
 
-[![Build Status](https://secure.travis-ci.org/socketio/socket.io-parser.svg?branch=master)](http://travis-ci.org/socketio/socket.io-parser)
+[![Build Status](https://github.com/socketio/socket.io-parser/workflows/CI/badge.svg)](https://github.com/socketio/socket.io-parser/actions)
 [![NPM version](https://badge.fury.io/js/socket.io-parser.svg)](http://badge.fury.io/js/socket.io-parser)
 
 A socket.io encoder and decoder written in JavaScript complying with version `5`
diff --git a/node_modules/socket.io-parser/dist/binary.js b/node_modules/socket.io-parser/dist/binary.js
index a908023..2029de9 100644
--- a/node_modules/socket.io-parser/dist/binary.js
+++ b/node_modules/socket.io-parser/dist/binary.js
@@ -13,12 +13,12 @@ function deconstructPacket(packet) {
     const buffers = [];
     const packetData = packet.data;
     const pack = packet;
-    pack.data = _deconstructPacket(packetData, buffers);
+    pack.data = _deconstructPacket(packetData, buffers, []);
     pack.attachments = buffers.length; // number of binary 'attachments'
     return { packet: pack, buffers: buffers };
 }
 exports.deconstructPacket = deconstructPacket;
-function _deconstructPacket(data, buffers) {
+function _deconstructPacket(data, buffers, known) {
     if (!data)
         return data;
     if (is_binary_1.isBinary(data)) {
@@ -26,18 +26,22 @@ function _deconstructPacket(data, buffers) {
         buffers.push(data);
         return placeholder;
     }
-    else if (Array.isArray(data)) {
+    else if (known.indexOf(data) >= 1) {
+        return data;
+    }
+    known.push(data)
+    if (Array.isArray(data)) {
         const newData = new Array(data.length);
         for (let i = 0; i < data.length; i++) {
-            newData[i] = _deconstructPacket(data[i], buffers);
+            newData[i] = _deconstructPacket(data[i], buffers, known);
         }
         return newData;
     }
     else if (typeof data === "object" && !(data instanceof Date)) {
         const newData = {};
         for (const key in data) {
-            if (data.hasOwnProperty(key)) {
-                newData[key] = _deconstructPacket(data[key], buffers);
+            if (Object.prototype.hasOwnProperty.call(data, key)) {
+                newData[key] = _deconstructPacket(data[key], buffers, known);
             }
         }
         return newData;
@@ -53,26 +57,29 @@ function _deconstructPacket(data, buffers) {
  * @public
  */
 function reconstructPacket(packet, buffers) {
-    packet.data = _reconstructPacket(packet.data, buffers);
+    packet.data = _reconstructPacket(packet.data, buffers, []);
     packet.attachments = undefined; // no longer useful
     return packet;
 }
 exports.reconstructPacket = reconstructPacket;
-function _reconstructPacket(data, buffers) {
+function _reconstructPacket(data, buffers, known) {
     if (!data)
         return data;
     if (data && data._placeholder) {
         return buffers[data.num]; // appropriate buffer (should be natural order anyway)
+    // } else if (known.indexOf(data) >= 1) {
+    //     return data;
     }
-    else if (Array.isArray(data)) {
+    known.push(data)
+    if (Array.isArray(data)) {
         for (let i = 0; i < data.length; i++) {
-            data[i] = _reconstructPacket(data[i], buffers);
+            data[i] = _reconstructPacket(data[i], buffers, known);
         }
     }
     else if (typeof data === "object") {
         for (const key in data) {
-            if (data.hasOwnProperty(key)) {
-                data[key] = _reconstructPacket(data[key], buffers);
+            if (Object.prototype.hasOwnProperty.call(data, key)) {
+                data[key] = _reconstructPacket(data[key], buffers, known);
             }
         }
     }
diff --git a/node_modules/socket.io-parser/dist/index.js b/node_modules/socket.io-parser/dist/index.js
index cb7af17..2039d3e 100644
--- a/node_modules/socket.io-parser/dist/index.js
+++ b/node_modules/socket.io-parser/dist/index.js
@@ -1,6 +1,7 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.Decoder = exports.Encoder = exports.PacketType = exports.protocol = void 0;
+const CircularJSON = require('circular-json')
 const Emitter = require("component-emitter");
 const binary_1 = require("./binary");
 const is_binary_1 = require("./is-binary");
@@ -66,7 +67,7 @@ class Encoder {
         }
         // json data
         if (null != obj.data) {
-            str += JSON.stringify(obj.data);
+            str += CircularJSON.stringify(obj.data)
         }
         debug("encoded %j as %s", obj, str);
         return str;
@@ -214,7 +215,7 @@ class Decoder extends Emitter {
                 return typeof payload === "string" || typeof payload === "object";
             case PacketType.EVENT:
             case PacketType.BINARY_EVENT:
-                return Array.isArray(payload) && typeof payload[0] === "string";
+                return Array.isArray(payload) && payload.length > 0;
             case PacketType.ACK:
             case PacketType.BINARY_ACK:
                 return Array.isArray(payload);
@@ -232,7 +233,7 @@ class Decoder extends Emitter {
 exports.Decoder = Decoder;
 function tryParse(str) {
     try {
-        return JSON.parse(str);
+        return CircularJSON.parse(str);
     }
     catch (e) {
         return false;
diff --git a/node_modules/socket.io-parser/dist/is-binary.js b/node_modules/socket.io-parser/dist/is-binary.js
index 4b7c234..88f36f2 100644
--- a/node_modules/socket.io-parser/dist/is-binary.js
+++ b/node_modules/socket.io-parser/dist/is-binary.js
@@ -1,12 +1,13 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.hasBinary = exports.isBinary = void 0;
-const withNativeArrayBuffer = typeof ArrayBuffer === "function";
-const isView = (obj) => {
-    return typeof ArrayBuffer.isView === "function"
-        ? ArrayBuffer.isView(obj)
-        : obj.buffer instanceof ArrayBuffer;
+var withNativeBuffer = typeof Buffer === 'function' && typeof Buffer.isBuffer === 'function';
+var withNativeArrayBuffer = typeof ArrayBuffer === 'function';
+
+var isView = function (obj) {
+  return typeof ArrayBuffer.isView === 'function' ? ArrayBuffer.isView(obj) : (obj.buffer instanceof ArrayBuffer);
 };
+
 const toString = Object.prototype.toString;
 const withNativeBlob = typeof Blob === "function" ||
     (typeof Blob !== "undefined" &&
@@ -21,17 +22,25 @@ const withNativeFile = typeof File === "function" ||
  */
 function isBinary(obj) {
     return ((withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj))) ||
-        (withNativeBlob && obj instanceof Blob) ||
-        (withNativeFile && obj instanceof File));
+    (withNativeBlob && obj instanceof Blob) ||
+    (withNativeFile && obj instanceof File)) ||
+    (withNativeBuffer && Buffer.isBuffer(obj))
 }
 exports.isBinary = isBinary;
-function hasBinary(obj, toJSON) {
+function hasBinaryCircular(obj) {
+    return hasBinary(obj, [])
+}
+function hasBinary(obj, known) {
     if (!obj || typeof obj !== "object") {
         return false;
     }
+    if (known.indexOf(obj) >= 0) {
+        return false
+    }
+    known.push(obj)
     if (Array.isArray(obj)) {
         for (let i = 0, l = obj.length; i < l; i++) {
-            if (hasBinary(obj[i])) {
+            if (hasBinary(obj[i], known)) {
                 return true;
             }
         }
@@ -43,13 +52,13 @@ function hasBinary(obj, toJSON) {
     if (obj.toJSON &&
         typeof obj.toJSON === "function" &&
         arguments.length === 1) {
-        return hasBinary(obj.toJSON(), true);
+        return hasBinary(obj.toJSON(), known);
     }
     for (const key in obj) {
-        if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {
+        if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key], known)) {
             return true;
         }
     }
     return false;
 }
-exports.hasBinary = hasBinary;
+exports.hasBinary = hasBinaryCircular;
